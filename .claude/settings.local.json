{
  "permissions": {
    "allow": [
      "Bash(docker-compose config:*)",
      "Bash(mkdir:*)",
      "Bash(mvn test:*)",
      "Bash(docker ps:*)",
      "Bash(docker-compose ps:*)",
      "Read(//home/ubuntu/repos/**)",
      "Bash(make:*)",
      "Bash(docker logs:*)",
      "Bash(docker-compose down:*)",
      "Bash(docker-compose up:*)",
      "Bash(mvn flyway:migrate:*)",
      "Bash(docker exec:*)",
      "Bash(mvn clean:*)",
      "Bash(psql:*)",
      "Bash(PGPASSWORD=dev123 psql:*)",
      "Bash(docker restart:*)",
      "Bash(ping:*)",
      "Bash(ip addr:*)",
      "Bash(docker run:*)",
      "Read(//tmp/**)",
      "Bash(curl:*)",
      "Bash(lsof:*)",
      "Bash(xargs kill:*)",
      "Bash(SPRING_PROFILES_ACTIVE=dev mvn spring-boot:run:*)",
      "Bash(pkill:*)",
      "Bash(SPRING_PROFILES_ACTIVE=local mvn spring-boot:run:*)",
      "Bash(chmod:*)",
      "Bash(/home/ubuntu/repos/jetski/infra/keycloak-setup/setup-keycloak.sh:*)",
      "Bash(mvn:*)",
      "Bash(awk:*)",
      "Read(//home/ubuntu/apps/**)",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: implement OAuth2 + OPA multi-tenant authentication and authorization\n\nAdd Spring Boot 3.3 backend with complete OAuth2/Keycloak integration and\nOPA-based policy authorization for multi-tenant SaaS architecture.\n\n## Backend (Spring Boot 3.3 + Java 21)\n- OAuth2 Resource Server with JWT validation\n- Keycloak 26 integration (configurable for local/dev environments)\n- Custom JWT authentication converter extracting roles\n- Multi-tenant context filter with X-Tenant-Id header support\n- OPA authorization service for RBAC and business rules\n- Test controller endpoints (public and protected)\n- PostgreSQL database with Flyway migrations\n- Multi-tenant schema with RLS-ready structure\n\n## Infrastructure\n- Keycloak setup scripts (local port 8081, dev port 8080)\n- Docker Compose with PostgreSQL, Redis, Keycloak, OPA\n- OPA policies for RBAC and approval authority (al√ßada)\n- Environment separation: LOCAL vs DEV profiles\n\n## Database\n- Multi-tenant tables (tenant, plano, assinatura, usuario, membro)\n- Operational tables (modelo, jetski, reserva, locacao, etc.)\n- Composite indexes for tenant_id + foreign keys\n- Seed data for development\n\n## Testing\n- Unit tests for TenantContext and TenantFilter\n- Integration-ready with Testcontainers support\n\n## Configuration\n- application-local.yml: Local development (Keycloak 8081, PostgreSQL 5433)\n- application-dev.yml: Docker environment (Keycloak 8080, PostgreSQL 5432)\n- application-test.yml: Test profile configuration\n\nü§ñ Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(bash:*)",
      "Bash(./bin/kc.sh:*)",
      "Bash(tar:*)",
      "Bash(docker-compose logs:*)",
      "Bash(sudo apt update:*)",
      "Bash(sudo apt install:*)",
      "Read(//usr/lib/python3/dist-packages/**)",
      "Read(//usr/lib/**)",
      "Bash(test:*)",
      "Bash(python3:*)",
      "Bash(cat:*)",
      "Read(//home/franciscocfreire/apps/**)",
      "Bash(for i in {1..30})",
      "Bash(do if tail -20 /tmp/keycloak.log)",
      "Bash(then echo \"Keycloak est√° pronto!\")",
      "Bash(break)",
      "Bash(fi)",
      "Bash(echo:*)",
      "Bash(done)",
      "Bash(for i in {1..20})",
      "Bash(do if tail -10 /tmp/keycloak.log)",
      "Bash(then echo \"Admin criado!\")",
      "Bash(ss:*)",
      "Bash(xargs -I {} curl -s -X GET \"http://localhost:8090/api/v1/user/tenants\" -H \"Authorization: Bearer {}\" -H \"Content-Type: application/json\")",
      "Bash(git mv:*)",
      "Bash(find:*)",
      "Bash({} ;)",
      "Bash(git add:*)",
      "Bash(git reset:*)",
      "Bash(git commit:*)",
      "Bash(tee:*)"
    ],
    "deny": [],
    "ask": []
  }
}
