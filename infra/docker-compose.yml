version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: jetski-postgres
    environment:
      POSTGRES_DB: jetski_dev
      POSTGRES_USER: jetski
      POSTGRES_PASSWORD: dev123
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - jetski-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jetski -d jetski_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: jetski-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - jetski-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: jetski-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console UI
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - jetski-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Client (mc) para criar bucket inicial
  minio-mc:
    image: minio/mc:latest
    container_name: jetski-minio-mc
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - jetski-network
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/jetski-photos --ignore-existing;
      /usr/bin/mc anonymous set public myminio/jetski-photos;
      exit 0;
      "

  # Keycloak (Identity Provider)
  keycloak:
    image: quay.io/keycloak/keycloak:26.0.0
    container_name: jetski-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/jetski_dev
      KC_DB_USERNAME: jetski
      KC_DB_PASSWORD: dev123
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_PROXY: edge
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    command: start-dev
    networks:
      - jetski-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Open Policy Agent (OPA)
  opa:
    image: openpolicyagent/opa:latest-rootless
    container_name: jetski-opa
    ports:
      - "8181:8181"
    volumes:
      - ../policies:/policies:ro
    command:
      - "run"
      - "--server"
      - "--addr=0.0.0.0:8181"
      - "/policies"
    networks:
      - jetski-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8181/health"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local

networks:
  jetski-network:
    driver: bridge
